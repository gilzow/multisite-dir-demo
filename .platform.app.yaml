# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: bvdr

# The runtime the application uses.
type: "php:7.4"

# Configuration of the build of the application.
build:
    flavor: composer

dependencies:
    php:
        composer/composer: '^2'
        wp-cli/wp-cli: "^2.2.0"

hooks:
    build: |
        set -e
        # Copy manually-provided plugins into the plugins directory.
        # This allows manually-provided and composer-provided plugins to coexist.
        rsync -a plugins/* wordpress/wp-content/plugins/

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:mysql"

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "wordpress"
            # The front-controller script to send non-static requests to.
            passthru: "/index.php"
            # Wordpress has multiple roots (wp-admin) so the following is required
            index:
                - "index.php"
            # The number of seconds whitelisted (static) content should be cached.
            expires: 600
            scripts: true
            allow: true
            rules:
                ^/composer\.json:
                    allow: false
                ^/license\.txt$:
                    allow: false
                ^/readme\.html$:
                    allow: false
              ################################
              ###        WORDPRESS        ###
              ###############################
              # We need to allow requests to wp-login.php to pass through
              # Multisites do not respect the WP_SITEURL constant in Wp-config. Since the vast majority of
              # migrated multisites were not set up using this constant, their siteurl location is hard-coded into the db
              # In addition, directory-based multisites include the virtual directory before the wp-login.php
              # Because of this, WordPress and plugins are unaware that core files are located in /wordpress/. This allows those
              # sites to continue to function properly, and single sites are unaffected as they respect the WP_SITEURL
              # constant. New multisites set up with the new paradigm will have their siteurl setting set correctly and will
              # also not be affected by this setting.
                '^/(?!wordpress/)([_0-9a-zA-Z-]+/)?wp-(?<wproot>[a-z\-]+).php$':
                  allow: true
                  scripts: true
                  passthru: '/wp-$wproot.php'
              # Allows directory-based multisites to still access the wp-admin and wp-include locations
                '^/(?!wordpress/)([_0-9a-zA-Z-]+/)?(?<adminrewrite>wp-(admin|includes).*)':
                  allow: true
                  scripts: true
                  passthru: '/$adminrewrite'
                '^/([_0-9a-zA-Z-]+)/wp-content/(?<content>.*)':
                  allow: true
                  scripts: false
                  passthru: '/wp-content/$content'
                  expires: 1w

        "/wp-content/cache":
            root: "wordpress/wp-content/cache"
            scripts: false
            allow: false
        "/wp-content/uploads":
            root: "wordpress/wp-content/uploads"
            scripts: false
            allow: true

# The size of the persistent disk of the application (in MB).
disk: 2048

# The mounts that will be performed when the package is deployed.
mounts:
    "wordpress/wp-content/cache":
        source: local
        source_path: "cache"
    "wordpress/wp-content/uploads":
        source: local
        source_path: "uploads"

